lwd=1,                              # 선의 굵기 선택
xlab="Month",                       # x축 레이블
ylab="Late cnt"                     # y축 레이블
)
# 코드 6-6
month = 1:12                             #
late  = c(5,8,7,9,4,6,12,13,8,6,6,4)     # 자료입력
plot(month,                              # x data
late,                               # y data
main="¡ˆ∞¢ª˝ ≈Î∞Ë",                 # 제목
type= "l",                          # 그래프의 종류 선택(알파벳)
lty=1,                              # 선의 종류 선택
lwd=1,                              # 선의 굵기 선택
xlab="Month",                       # x축 레이블
ylab="Late cnt"                     # y축 레이블
)
드 6-6
month = 1:12                             #
late  = c(5,8,7,9,4,6,12,13,8,6,6,4)     # 자료입력
plot(month,                              # x data
late,                               # y data
main="¡ˆ∞¢ª˝ ≈Î∞Ë",                 # 제목
type= "l",                          # 그래프의 종류 선택(알파벳)
lty=1,                              # 선의 종류 선택
lwd=1,                              # 선의 굵기 선택
xlab="Month",                       # x축 레이블
ylab="Late cnt"                     # y축 레이블
)
month = 1:12                             #
late  = c(5,8,7,9,4,6,12,13,8,6,6,4)     # 자료입력
plot(month,                              # x data
late,                               # y data
main="지각생 통계",                 # 제목
type= "l",                          # 그래프의 종류 선택(알파벳)
lty=1,                              # 선의 종류 선택
lwd=1,                              # 선의 굵기 선택
xlab="Month",                       # x축 레이블
ylab="Late cnt"                     # y축 레이블
)
# 코드 6-6
month = 1:12                             #
late  = c(5,8,7,9,4,6,12,13,8,6,6,4)     # 자료입력
plot(month,                              # x data
late,                               # y data
main="지각생 통계",                 # 제목
type= "l",                          # 그래프의 종류 선택(알파벳)
lty=1,                              # 선의 종류 선택
lwd=1,                              # 선의 굵기 선택
xlab="Month",                       # x축 레이블
ylab="Late cnt"                     # y축 레이블
)
month = 1:12
late1  = c(5,8,7,9,4,6,12,13,8,6,6,4)
late2  = c(4,6,5,8,7,8,10,11,6,5,7,3)
plot(month,                                # x data
late1,                                # y data
main="Late Students",
type= "b",                            # 그래프의 종류 선택
lty=1,                                # 선종류
col="red",                            # 선의 색
xlab="Month ",                        # x 레이블
ylab="Late cnt",                      # y 레이블
ylim=c(1, 15)                         # y축 값의 (하한, 상한)
)
lines(month,                               # x data
late2,                               # y data
type = "b",                          # 선 종류
col = "blue")                        # 선의 색 선택
install.packages("mlbench")
library(mlbench)
data(BostonHousing)
data
BostonHousing
heae(BostonHousing)
head(BostonHousing)
#코드 5 - 11
boxplot(Petal.Length~Species, data = iris, main = "품종별 꽃잎의 길이")
Petal.Length~Species
wt <-mtcars$wt                  #중량 자료
mpg <- mtcars$mpg              # 연비 자료
plot(wt, mpg,
main="중량 - 연비 그래프",
xlab="중량",
ylab="연비",
col="red",                 #point의 color
pch=17)                     #point의 종류
코드 6-3
iris.2 <- iris[,3:4]                # 데이터 준비
point <- as.numeric(iris$Species)   # 점의 모양  # as. numeric는 그룹들에 숫자 라벨링 해줌
point                               # point 내용 출력
color <- c("red","green","blue")    # 점의 컬러
plot(iris.2,
main="Iris plot",
pch=c(point),
col=color[point])
res <- lm(bal~beers,data=tbl)                  # 회귀식 도출
abline(res)                                    # 회귀선 그리기
cor(beers,bal)
beers = c(5,2,9,8,3,7,3,5,3,5)                 # 자료입력
bal <- c(0.1,0.03,0.19,0.12,0.04,0.0095,0.07,  # 자료 입력
0.06,0.02,0.05)
tbl <- data.frame(beers,bal)                   # 데이터 프레임 생성
tbl
plot(bal~beers,data=tbl)                       # 산점도 beers 별로 bal를 나눔
res <- lm(bal~beers,data=tbl)                  # 회귀식 도출
abline(res)                                    # 회귀선 그리기
cor(beers,bal)                                 # 상관계수 계산
# 다중변수 자료의 탐색
# 01. 산점도
# 다중변수 자료 : 변수가 2개 이상인 자료
#산점도 : 2개의 변수로 구성된 자료의 분포를 알아보는 그래프.
#코드 6-1
wt <-mtcars$wt                  #중량 자료
mpg <- mtcars$mpg              # 연비 자료
plot(wt, mpg,
main="중량 - 연비 그래프",
xlab="중량",
ylab="연비",
col="red",                 #point의 color
pch=17)                     #point의 종류
#여러 변수들 간의 산점도
#코드 6-2
vars <- c("mpg","disp","drat","wt")    # 대상 변수
target <- mtcars[,vars]
head(target)
pairs(target, main = "Multi plots")   #대상 데이터들의 값들을 묶어줌.
#그룹 정보가 있는 두 변수의 산점도
# 코드 6-3
iris.2 <- iris[,3:4]                # 데이터 준비
point <- as.numeric(iris$Species)   # 점의 모양  # as. numeric는 그룹들에 숫자 라벨링 해줌
point                               # point 내용 출력
color <- c("red","green","blue")    # 점의 컬러
plot(iris.2,
main="Iris plot",
pch=c(point),
col=color[point])
#02. 상관 분석
# 상관 분석과 상관계수
# - 자동차의 중량이 커지면 연비는 감소하는 추세.
# 추세의 모양이 선 모양이어서 중량과 연비는 '선형적 관계'에 있다고 표현
# 선형적 관계라고 해도 강한 선형적 관계가 있고 약한 선형적 관계도 있음
# 상관 분석 : 얼마나 선형성을 보이는지 수치상으로 나타낼 수 있는 방법.
# 코드 6-4
beers = c(5,2,9,8,3,7,3,5,3,5)                 # 자료입력
bal <- c(0.1,0.03,0.19,0.12,0.04,0.0095,0.07,  # 자료 입력
0.06,0.02,0.05)
tbl <- data.frame(beers,bal)                   # 데이터 프레임 생성
tbl
plot(bal~beers,data=tbl)                       # 산점도 beers 별로 bal를 나눔
res <- lm(bal~beers,data=tbl)                  # 회귀식 도출
abline(res)                                    # 회귀선 그리기
cor(beers,bal)                                 # 상관계수 계산
#  코드 6-5
cor(iris[,1:4]) # 4개 변수 간 상관성 분석
#03 .선그래프
# 코드 6-6
month = 1:12                             #
late  = c(5,8,7,9,4,6,12,13,8,6,6,4)     # 자료입력
plot(month,                              # x data
late,                               # y data
main="지각생 통계",                 # 제목
type= "l",                          # 그래프의 종류 선택(알파벳) # l, b, s, o 가능
lty=1,                              # 선의 종류 선택
lwd=1,                              # 선의 굵기 선택
xlab="Month",                       # x축 레이블
ylab="Late cnt"                     # y축 레이블
)
#복수의 선 그래프
#코드 6-7
month = 1:12
late1  = c(5,8,7,9,4,6,12,13,8,6,6,4)
late2  = c(4,6,5,8,7,8,10,11,6,5,7,3)
plot(month,                                # x data
late1,                                # y data
main="Late Students",
type= "b",                            # 그래프의 종류 선택
lty=1,                                # 선종류
col="red",                            # 선의 색
xlab="Month ",                        # x 레이블
ylab="Late cnt",                      # y 레이블
ylim=c(1, 15)                         # y축 값의 (하한, 상한)
)
lines(month,                               # x data
late2,                               # y data
type = "b",                          # 선 종류
col = "blue")                        # 선의 색 선택
library(mlbench)
data(BostonHousing)
head(BostonHousing)
myds <-BostonHousing[,c("cr")]
wt <-mtcars$wt                  #중량 자료
mpg <- mtcars$mpg              # 연비 자료
tbl<-data.frame(wt,mpg)
plot(wt, mpg,
main="중량 - 연비 그래프",
xlab="중량",
ylab="연비",
col="red",                 #point의 color
pch=17)                     #point의 종류
plot(mpg~wt,data=tbl)                       # 산점도 beers 별로 bal를 나눔
res <- lm(mpg~wt,data=tbl)                  # 회귀식 도출
abline(res)                                    # 회귀선 그리기
cor(wt,mpg)
#코드 6-1
wt <-mtcars$wt                  #중량 자료
mpg <- mtcars$mpg              # 연비 자료
tbl<-data.frame(wt,mpg)
plot(wt, mpg,
main="중량 - 연비 그래프",
xlab="중량",
ylab="연비",
col="red",                 #point의 color
pch=17)                     #point의 종류
plot(mpg~wt,data=tbl)                       # 산점도 beers 별로 bal를 나눔
res <- lm(mpg~wt,data=tbl)                  # 회귀식 도출
abline(res)                                    # 회귀선 그리기
## (1) Prepare Data ----------------------
library(mlbench)
data("BostonHousing")
myds <- BostonHousing[,c("crim","rm","dis","tax","medv")]
## (2) Add new column ----------------------
grp <- c()
for (i in 1:nrow(myds)) {                   # myds$medv 값에 따라 그룹 분류
if (myds$medv[i] >= 25.0) {
grp[i] <- "H"
} else if (myds$medv[i] <= 17.0) {
grp[i] <- "L"
} else {
grp[i] <- "M"
}
}
grp <- factor(grp)                          # 문자벡터를 팩터 타입으로 변경
grp <- factor(grp, levels=c("H","M","L"))   # 레벨의 순서를 H,L,M -> H,M,L
myds <- data.frame(myds, grp)               # myds 에 grp 열 추가
myds
## (3) Add new column ----------------------
str(myds)
head(myds)
table(myds$grp)                             # ???? ???? ?׷캰 ????
table(myds$grp)                             # 주택 가격 그룹별 분포
## (4) histogram ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
for(i in 1:5) {
hist(myds[,i], main=colnames(myds)[i], col="yellow")
}
par(mfrow=c(1,1))                           # 2x3 가상화면 분할 해제
## (4) histogram ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
## (4) histogram ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
for(i in 1:5) {
hist(myds[,i], main=colnames(myds)[i], col="yellow")
}
par(mfrow=c(1,1))                           # 2x3 가상화면 분할 해제
## (5) boxplot ----------------------
par(mfrow=c(2,3))                           # 2x3 ????ȭ?? ????
(2,3))                           # 2x3 ????ȭ?? ????
for(i in 1:5) {
boxplot(myds[,i], main=colnames(myds)[i])
}
## (4) histogram ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
for(i in 1:5) {
hist(myds[,i], main=colnames(myds)[i], col="yellow")
}
par(mfrow=c(1,1))                           # 2x3 가상화면 분할 해제
## (5) boxplot ----------------------
par(mfrow=c(2,3))                           # 2x3 ????ȭ?? ????
for(i in 1:5) {
boxplot(myds[,i], main=colnames(myds)[i])
}
par(mfrow=c(1,1))                           # 2x3 ????ȭ?? ???? ??��
## (6) boxplot by group ------------------
boxplot(myds$crim~myds$grp, main="1?δ? ????��")
boxplot(myds$rm~myds$grp, main="????  ??")
## (4) histogram ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
for(i in 1:5) {
hist(myds[,i], main=colnames(myds)[i], col="yellow")
}
par(mfrow=c(1,1))                           # 2x3 가상화면 분할 해제
## (5) boxplot ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
## (6) boxplot by group ------------------
boxplot(myds$crim~myds$grp, main="1?δ? ????��")
for(i in 1:5) {
boxplot(myds[,i], main=colnames(myds)[i])
}
## (4) histogram ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
for(i in 1:5) {
hist(myds[,i], main=colnames(myds)[i], col="yellow")
}
par(mfrow=c(1,1))                           # 2x3 가상화면 분할 해제
## (5) boxplot ----------------------
par(mfrow=c(2,3))                           # 2x3 가상화면 분할
for(i in 1:5) {
boxplot(myds[,i], main=colnames(myds)[i])
}
par(mfrow=c(1,1))                           # 2x3 가상화면 분할 해제
## (6) boxplot by group ------------------
boxplot(myds$crim~myds$grp, main="1인당 범죄율")
boxplot(myds$rm~myds$grp, main="방의개수")
boxplot(myds$rm~myds$grp, main="방의 개수")
## (6) boxplot by group ------------------
boxplot(myds$crim~myds$grp, main="1인당 범죄율")
boxplot(myds$rm~myds$grp, main="방의 개수")
boxplot(myds$dis~myds$grp, main="거리 ")
boxplot(myds$tax~myds$grp, main="세금")
## (7) scatter plot ------------------
pairs(myds[,-6])
## (8) scatter plot with group ------------------
point <- as.integer(myds$grp)                 # 점의 모양 지정
color <- c("red","green","blue")              # 점의 색 지정
pairs(myds[,-6], pch=point, col=color[point])
## (9) correlation coefficient ------------------
cor(myds[,-6])
## (9) correlation coefficient ------------------
cor(myds[,-6])                                #상관 계수 확인.
is.na(z)                     # NA 여부 확인
sum(is.na(z))                # NA의 개수 확인
z <- c(1,2,3,NA,5,NA,8)      # 결측값이 포함된 벡터 z
sum(z)                       # 정상 계산이 안됨
is.na(z)                     # NA 여부 확인
sum(is.na(z))                # NA의 개수 확인
sum(z, na.rm=TRUE)           # NA를 제외하고 합계를 계산
z1[is.na(z1)] <- 0            # NA를 0으로 치환
z1
z1 <- c(1,2,3,NA,5,NA,8)      # 결측값이 포함된 벡터 z1
z2 <- c(5,8,1,NA,3,NA,7)      #  결측값이 포함된 벡터 z2
z1[is.na(z1)] <- 0            # NA를 0으로 치환
z1
z3 <- as.vector(na.omit(z2))  # NA를 제거하고 새로운 벡터 생성
z1
z3 <- as.vector(na.omit(z2))  # NA를 제거하고 새로운 벡터 생성
z3
#NA를 포함하는 test 데이터 생성
x <- iris
x[1,2]<- NA; x[1,3]<- NA
x[2,3]<- NA; x[3,4]<- NA
head(x)
x[1,2]<- NA; x[1,3]<- NA
x[2,3]<- NA; x[3,4]<- NA
head(x)
# for을 이용하는 방법
for (i in 1:ncol(x)) {
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
# apply?? ?̿??? ????
col_na <- function(y) {
return(sum(is.na(y)))
}
# for을 이용하는 방법
for (i in 1:ncol(x)) {
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
# apply를 이용하
col_na <- function(y) {
return(sum(is.na(y)))
}
na_count <-apply(x, 2, FUN=col_na)
na_count
# for을 이용하는 방법
for (i in 1:ncol(x)) {
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
# apply를 이용하
col_na <- function(y) {
return(sum(is.na(y)))
}
na_count <-apply(x, 2, FUN=col_na)
na_count
# for을 이용하는 방법
for (i in 1:ncol(x)) {
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
# apply를 이용한 방법
col_na <- function(y) {
return(sum(is.na(y)))
}
na_count <-apply(x, 2, FUN=col_na)
na_count
return(sum(is.na(y)))
# apply를 이용한 방법
col_na <- function(y) {
return(sum(is.na(y)))
}
na_count <-apply(x, 2, FUN=col_na)
na_count <-apply(x, 2, FUN=col_na)
na_count
# apply를 이용한 방법
col_na <- function(y) {
return(sum(is.na(y)))
}
na_count <-apply(x, 2, FUN=col_na)
na_count
#값들을 col_na로 보냄.
na_count
# for을 이용하는 방법
for (i in 1:ncol(x)) {      #x의 열의 개수
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
# apply를 이용한 방법
col_na <- function(y) {
return(sum(is.na(y)))
}
# for을 이용하는 방법
for (i in 1:ncol(x)) {      #x의 열의 개수
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
# for을 이용하는 방법
for (i in 1:ncol(x)) {      #x의 열의 개수
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
# for을 이용하는 방법
for (i in 1:ncol(x)) {      #x의 열의 개수
this.na <- is.na(x[,i])
cat(colnames(x)[i], "\t", sum(this.na), "\n")
}
rowSums(is.na(x))            # 행별 NA의 개수
sum(rowSums(is.na(x))>0)     # NA가 포함된 행의 개수
sum(is.na(x))                # 데이터셋 전체에서 NA 개수
x[!complete.cases(x),]              # NA가 포함된 행들 출력
y <- x[complete.cases(x),]          # NA가 포함된 행들 제거
head(x)
x[!complete.cases(x),]              # NA가 포함된 행들 출력
y <- x[complete.cases(x),]          # NA가 포함된 행들 제거
head(y)                             # 새로운 데이터셋 확인
y <- x[complete.cases(x),]          # NA가 포함된 행들 제거
x[!complete.cases(x),]              # NA가 포함된 행들 출력
x[!complete.cases(x),]              # NA가 포함된 행들 출력
x[!complete.cases(x),]              # NA가 포함된 행들 출력
x[!complete.cases(x),]              # NA가 포함된 행들 출력
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
boxplot(st$Income)
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
data <- iris[,-5]
data[3,1] <- 10.1
boxplot(data$Sepal.Length)
data <- iris[,-5]
data[3,1] <- 10.1
boxplot(data$Sepal.Length)
head(data)
st <- data.frame(state.x77)
boxplot(st$Income)
data <- iris[,-5]
data[3,1] <- 10.1
boxplot(data$Sepal.Length)
head(data)
out.val <- boxplot.stats(data$Sepal.Length)$out     # 특이값 추출
data <- iris[,-5]
data[3,1] <- 10.1
boxplot(data$Sepal.Length)
head(data)
out.val <- boxplot.stats(data$Sepal.Length)$out     # 특이값 추출
st$Income[data$Sepal.Length %in% out.val] <- NA     # 특이값을 na로 대체(특별연산자)
head(st)
newdata <- st[complete.cases(st),]          # NA가 포함된 행 제거
head(newdata)
data <- iris[,-5]
data[3,1] <- 10.1
boxplot(data$Sepal.Length)
head(data)
out.val <- boxplot.stats(data$Sepal.Length)$out     # 특이값 추출
data$Sepal.Length[data$Sepal.Length %in% out.val] <- NA     # 특이값을 na로 대체(특별연산자)
head(data)
newdata <- data[complete.cases(data),]          # NA가 포함된 행 제거
head(newdata)
data <- iris[,-5]
data[3,1] <- 10.1
boxplot(data$Sepal.Length)
head(data)
out.val <- boxplot.stats(data$Sepal.Length)$out     # 특이값 추출
data$Sepal.Length[data$Sepal.Length %in% out.val] <- NA     # 특이값을 na로 대체(특별연산자)
head(data)
newdata <- data[complete.cases(data),]          # NA가 포함된 행 제거
head(newdata)
localeToCharset()
Sys.setlocale(category = "LC_CTYPE",locale = "ko_KR.UTF-8")
localeToCharset()
Sys.setlocale(category = "LC_CTYPE",locale = "ko KR.UTF-8")
Sys.setlocale(category = "LC_CTYPE",locale = "ko_KR.UTF-8")
UTF-8
localeToCharset()
Sys.setlocale(category = "LC_CTYPE",locale = "ko_KR.UTF-8")
localeToCharset()
